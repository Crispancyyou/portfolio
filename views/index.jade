doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title Josh Edison
        //- Favicon & App Icons (Works Locally & On Server)
    link(rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png")
    link(rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png")
    link(rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16.png")
    link(rel="icon" type="image/x-icon" href="/images/favicon.ico")
    style.
      /* Basic resets */
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body, html {
        width: 100%;
        height: 100%;
        overflow: hidden; /* Hide scrollbars */
        font-family: 'Verdana', sans-serif;
      }

      /* Video Background */
      .video-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        object-fit: cover;
        z-index: -1; /* Ensures video stays behind everything else */
      }

      /* Main container */
      .loading-screen-container {
        position: relative; /* Allows absolutely positioned children */
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        color: #f00;
        height: 100vh;
      }

      /* Semi-transparent overlay */
      .overlay-rectangle {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(12, 9, 9, 0.5); /* Dark overlay at 50% opacity */
        z-index: 0; /* Behind the text and menu */
      }

      /* Ensure text and menu appear above the overlay */
      .loading-screen-container h1.game-title,
      .loading-screen-container .menu {
        position: relative;
        z-index: 1;
      }

      /* "Loading" text or main heading */
      h1.game-title {
        font-size: 3rem;
        text-transform: uppercase;
        margin-bottom: 2rem;
        letter-spacing: 2px;
      }

      /* Menu container */
      .menu {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
      }

      /* Each menu item */
      .menu a {
        position: relative;
        color: #f00;
        text-decoration: none;
        font-size: 1.7rem;
        font-weight: bold;
        letter-spacing: 1px;
        text-transform: uppercase;
        transition: color 0.3s ease;
      }

      .menu a:hover {
        color: #0f0; /* Hover color */
      }

      /* Underline animation effect */
      .menu a::after {
        content: '';
        position: absolute;
        left: 0;
        bottom: -4px;
        width: 0;
        height: 2px;
        background-color: #0f0;
        transition: width 0.3s ease;
      }

      .menu a:hover::after {
        width: 100%;
      }

      /* Example animated “selector” (like a pulsing ring) */
      .selector {
        position: absolute;
        left: -40px;
        top: 50%;
        transform: translateY(-50%);
        width: 20px;
        height: 20px;
        border: 2px solid #0f0;
        border-radius: 50%;
        animation: ping 1.2s infinite;
      }

      h1.game-title,
      .menu a {
        color: #f00;
        text-shadow: 
          -1px -1px 0 #000,
          1px -1px 0 #000,
          -1px  1px 0 #000,
          1px  1px 0 #000;
      }

      @keyframes ping {
        0% {
          transform: scale(1) translateY(-50%);
          opacity: 1;
        }
        75%, 100% {
          transform: scale(2) translateY(-50%);
          opacity: 0;
        }
      }

      /* Responsive styling for mobile screens */
      @media screen and (max-width: 768px) {
        h1.game-title {
          font-size: 2rem; /* Smaller heading on mobile */
        }

        .menu a {
          font-size: 1.4rem; /* Slightly smaller menu text on mobile */
        }
      }

  body

    video.video-background(
      autoplay,
      muted,
      loop,
      playsinline,
      webkit-playsinline,   
      disablePictureInPicture,
      controlsList="nodownload nofullscreen noremoteplayback"
      preload="auto"
    )
      source(src="videos/video.mp4" type="video/mp4")

    .loading-screen-container

      .overlay-rectangle

      h1.game-title Developer Presents
      .menu
        a(href="/portfolio")
          span.selector
          | Portfolio
        a(href="/aboutme")
          span.selector
          | About Me
        a(href="/contact")
          span.selector
          | Contact

    script.

      document.addEventListener('DOMContentLoaded', function() {
          const video = document.querySelector('.video-background');

          if (video) {
              video.muted = true; // Ensure muted
              video.playsInline = true; // Ensure inline playback
              video.load(); // Ensure video is loaded before playing

              // Explicitly attempt to play
              const playPromise = video.play();

              if (playPromise !== undefined) {
                  playPromise.catch(() => {
                      console.warn('Autoplay blocked. Hiding fake play button.');

                      // Create Hidden Play Button (Trick for Mobile Autoplay)
                      const playButton = document.createElement('button');
                      playButton.textContent = 'Play Video';
                      playButton.style.position = 'absolute';
                      playButton.style.top = '50%';
                      playButton.style.left = '50%';
                      playButton.style.transform = 'translate(-50%, -50%)';
                      playButton.style.zIndex = '2';
                      playButton.style.padding = '10px 20px';
                      playButton.style.fontSize = '16px';
                      playButton.style.cursor = 'pointer';
                      playButton.style.background = 'rgba(0,0,0,0.7)';
                      playButton.style.color = '#fff';
                      playButton.style.border = 'none';
                      playButton.style.borderRadius = '5px';

                      // Hide the button visually but keep it functional
                      playButton.style.opacity = '0'; // Makes it invisible
                      playButton.style.pointerEvents = 'none'; // Prevents interaction

                      playButton.addEventListener('click', () => {
                          video.play();
                          playButton.remove();
                      });

                      document.body.appendChild(playButton);
                  });
              }
          }
      });


